<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>OR-URISA Young Professionals</title>
        <description>OR-URISA Young Professionals - The Oregon URISA Young Professionals Group</description>
        <link>or-urisa-yps</link>
        <link>or-urisa-yps</link>
        <lastBuildDate>2013-04-06T12:17:32-07:00</lastBuildDate>
        <pubDate>2013-04-06T12:17:32-07:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Jekyll Introduction</title>
                <description>&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='https://github.com/mojombo/jekyll/wiki/Install'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.markdown
|   |-- 20011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;title&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;  &lt;span class='l-Scalar-Plain'&gt;Hello World&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;categories&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='p-Indicator'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;lessons&lt;/span&gt;&lt;span class='p-Indicator'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;beginner&lt;/span&gt;&lt;span class='p-Indicator'&gt;]&lt;/span&gt;
&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;layout&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;post&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;category&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;pages&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;tags&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='p-Indicator'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;how-to&lt;/span&gt;&lt;span class='p-Indicator'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;jekyll&lt;/span&gt;&lt;span class='p-Indicator'&gt;]&lt;/span&gt;
&lt;span class='nn'&gt;---&lt;/span&gt;

&lt;span class='nn'&gt;...&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;contents ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies a layout parameter, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file will work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;
&lt;hr /&gt;&lt;ul class='pager'&gt;
  &lt;li&gt;
    &lt;a href='/api/2011/11/30/template-data-api'&gt;Next Step: Template Data Api &amp;rarr;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
                <link>or-urisa-yps/lessons/2011/12/29/jekyll-introduction</link>
                <guid>or-urisa-yps/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='/api/2011/11/30/template-data-api'&gt;Template Data Api&lt;/a&gt; or jump right into &lt;a href='/usage/2011/10/31/jekyll-quick-start'&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</description>
                <link>or-urisa-yps/lessons/2011/12/29/jekyll-introduction</link>
                <guid>or-urisa-yps/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Template Data Api</title>
                <description>&lt;h2 id='global_pagepost_data'&gt;Global Page/Post Data&lt;/h2&gt;

&lt;p&gt;Every content file that Jekyll processes is either a page or a post. In both cases the data relative to the specific page or post being rendered within the template is accessible through the &lt;code&gt;page&lt;/code&gt; variable. The page variable is a globally accessible variable available to all templates, posts, pages, and includes being rendered for the given post/page instance.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='c1'&gt;# The following format represents a Jekyll::Post or Jekyll::Page object. &lt;/span&gt;
&lt;span class='c1'&gt;# Jekyll::Post and Jekyll::Page objects may be nested in other variables in which case you can expect this same format:&lt;/span&gt;
&lt;span class='n'&gt;page&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;layout&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;lessons&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Jekyll Liquid Api&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/lessons/jekyll-liquid-api.html&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;2011&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mo'&gt;01&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;27&lt;/span&gt; &lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;00&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;0800&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/lessons/jekyll-liquid-api&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='c1'&gt;#Jekyll:Post @id=&amp;quot;/lessons/template-data-api&amp;quot;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;previous&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='c1'&gt;#Jekyll:Post @id=&amp;quot;/lessons/configuring-urls&amp;quot;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;tagname1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;tagname2&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;custom_variable&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;custom&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;defined&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;data-structure&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;... this is the unparsed raw html page/post content ...&amp;quot;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='setting_custom_data'&gt;Setting Custom Data&lt;/h3&gt;

&lt;p&gt;You can set custom variables through the post or page Yaml Front matter and they will be included in the page hash.&lt;/p&gt;

&lt;p&gt;One important thing to note is that each Jekyll &amp;#8220;rendering&amp;#8221; instance is treating as a page/post object. ALL YAML Front matter is merged into the current page/post instance. So if you define custom data in the post file, then define custom data in the sub-template, and also in the root template, all data will merge into the same page hash.&lt;/p&gt;

&lt;h2 id='content_data'&gt;Content Data&lt;/h2&gt;

&lt;p&gt;Jekyll uses a special variable named &lt;code&gt;content&lt;/code&gt; to refer to the current page/post content.&lt;/p&gt;

&lt;p&gt;The difference between &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;page.content&lt;/code&gt; is the former is parsed with markdown or textile while the latter is raw.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;content&lt;/code&gt; variable is only accessible in template files and include files provided the include is included into a template.&lt;/p&gt;

&lt;h3 id='content_in_primary_templates'&gt;Content in Primary Templates.&lt;/h3&gt;

&lt;p&gt;When calling &lt;code&gt;content&lt;/code&gt; in a primary template the content includes any sub-templates previously rendered by the page/post.&lt;/p&gt;

&lt;h3 id='content_in_subtemplates'&gt;Content in Sub-Templates.&lt;/h3&gt;

&lt;p&gt;When calling &lt;code&gt;content&lt;/code&gt; in a sub-template &lt;code&gt;content&lt;/code&gt; includes any sub-sub-templates previously rendered by the page/post. If there are none, &lt;code&gt;content&lt;/code&gt; just reflects the page/post as processed by markdown or textile.&lt;/p&gt;

&lt;h2 id='global_site_data'&gt;Global Site Data&lt;/h2&gt;

&lt;p&gt;This data is available anywhere liquid is available. This includes templates, posts, pages, and includes.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;site&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='s2'&gt;&amp;quot;related_posts&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;safe&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;auto&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;server&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;server_port&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;4000&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/Users/jade/Dropbox/github/jekyll-bootstrap&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;destination&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/Users/jade/Dropbox/github/jekyll-bootstrap/_site&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/Users/jade/Dropbox/github/jekyll-bootstrap/_plugins&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;future&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;lsi&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;pygments&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;maruku&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;permalink&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/:categories/:title.html&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;markdown_ext&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;markdown,mkd,mkdn,md&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;textile_ext&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;textile&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;maruku&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='p'&gt;{&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;use_tex&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;use_divs&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;png_engine&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;blahtex&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;png_dir&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;images/latex&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;png_url&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;/images/latex&amp;quot;&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;rdiscount&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;[]&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;redcarpet&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='s2'&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;[]&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;kramdown&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='p'&gt;{&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;auto_ids&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;footnote_nr&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;entity_output&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;as_char&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;toc_levels&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;1..6&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;use_coderay&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='kp'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;coderay&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='p'&gt;{&lt;/span&gt;
     &lt;span class='s2'&gt;&amp;quot;coderay_wrap&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
     &lt;span class='s2'&gt;&amp;quot;coderay_line_numbers&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;inline&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
     &lt;span class='s2'&gt;&amp;quot;coderay_line_number_start&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
     &lt;span class='s2'&gt;&amp;quot;coderay_tab_width&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
     &lt;span class='s2'&gt;&amp;quot;coderay_bold_every&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
     &lt;span class='s2'&gt;&amp;quot;coderay_css&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;style&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='mi'&gt;2011&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;12&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;20&lt;/span&gt; &lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mo'&gt;03&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;53&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;0800&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Page&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;html_pages&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Page&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;examples&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;lessons&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 &lt;span class='s2'&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class='p'&gt;{&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;permalinks&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;urls&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;templating&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;liquid&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
   &lt;span class='s2'&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;[.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;liquified&lt;/span&gt; &lt;span class='ss'&gt;Jekyll&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='ss'&gt;:Post&lt;/span&gt; &lt;span class='n'&gt;objects&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;.&lt;/span&gt;&lt;span class='o'&gt;.]&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='sitewide_custom_data'&gt;Sitewide Custom Data&lt;/h3&gt;

&lt;p&gt;Set sitewide custom data using the config file.&lt;/p&gt;

&lt;p&gt;Variables held in the config file get merged into the site variable.&lt;/p&gt;

&lt;h2 id='categories'&gt;Categories&lt;/h2&gt;

&lt;p&gt;Categories may only be applied to posts and are available on a per-post basis as well as aggregated in a sitewide global variable, i.e. all categories available for the website.&lt;/p&gt;

&lt;p&gt;When iterating over categories the order is alpha descending&lt;/p&gt;

&lt;h2 id='tags'&gt;Tags&lt;/h2&gt;

&lt;p&gt;Tags may only be applied to posts and are available on a per-post basis as well as aggregated in a sitewide global variable, i.e. all tags available for the website.&lt;/p&gt;

&lt;p&gt;When iterating over tags the order is alpha descending.&lt;/p&gt;</description>
                <link>or-urisa-yps/api/2011/11/30/template-data-api</link>
                <guid>or-urisa-yps/api/2011/11/30/template-data-api</guid>
                <pubDate>2011-11-30T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Jekyll Liquid Api</title>
                <description>&lt;h2 id='introduction'&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Jekyll uses the standard Liquid templating language package and includes a few other helpful extensions of its own.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap does not support plugin development so only the standard filters and logic will be available to us.&lt;/p&gt;

&lt;p&gt;Remember we are the end-users!&lt;/p&gt;

&lt;h2 id='liquid_crash_course'&gt;Liquid Crash Course&lt;/h2&gt;

&lt;p&gt;The following link contains a comprehensive course in everything available in Liquid. The standard library is also available in Jekyll.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://github.com/Shopify/liquid/wiki/Liquid-for-Designers'&gt;http://github.com/Shopify/liquid/wiki/Liquid-for-Designers&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='liquid_extensions_provided_with_jekyll'&gt;Liquid Extensions Provided With Jekyll&lt;/h2&gt;

&lt;p&gt;Jekyll introduces a few other filters and tags as outlined here:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://github.com/mojombo/jekyll/wiki/Liquid-Extensions'&gt;http://github.com/mojombo/jekyll/wiki/Liquid-Extensions&lt;/a&gt;&lt;/p&gt;</description>
                <link>or-urisa-yps/api/2011/11/29/jekyll-liquid-api</link>
                <guid>or-urisa-yps/api/2011/11/29/jekyll-liquid-api</guid>
                <pubDate>2011-11-29T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Jekyll Bootstrap API</title>
                <description>&lt;h2 id='how_it_works'&gt;How it Works&lt;/h2&gt;

&lt;p&gt;The Bootstrap API takes advantage of Jekyll&amp;#8217;s ability to &amp;#8220;include&amp;#8221; files within other files. This allows us to package chunks of complex &lt;a href='http://liquidmarkup.org/'&gt;Liquid&lt;/a&gt; code into reusable modules that can be called throughout your templates, pages, and posts.&lt;/p&gt;

&lt;p&gt;If you are familiar with ruby on rails this pattern is essentially the same as defining methods in a view helper module and invoking them in your views.&lt;/p&gt;

&lt;h3 id='define_a_new_method'&gt;Define a new &amp;#8220;method&amp;#8221;&lt;/h3&gt;

&lt;p&gt;Jekyll-Bootstrap uses includes to emulate a ruby method. First encapsulate your liquid code logic in a Jekyll include file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% if site.JB.tags_list.provider == &quot;custom&quot; %&amp;#125;
  &amp;#123;% include custom/tags_list %&amp;#125;
&amp;#123;% else %&amp;#125;
  &amp;#123;% if tags_list.first[0] == null %&amp;#125;
    &amp;#123;% for tag in tags_list %&amp;#125; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&amp;#123;{ BASE_PATH }&amp;#125;&amp;#123;{ site.JB.tags_path }&amp;#125;#&amp;#123;{ tag }&amp;#125;-ref&quot;&amp;gt;&amp;#123;{ tag }&amp;#125; &amp;lt;span&amp;gt;&amp;#123;{ site.tags[tag].size }&amp;#125;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;#123;% endfor %&amp;#125;
  &amp;#123;% else %&amp;#125;
    &amp;#123;% for tag in tags_list %&amp;#125;
      &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&amp;#123;{ BASE_PATH }&amp;#125;&amp;#123;{ site.JB.tags_path }&amp;#125;#&amp;#123;{ tag[0] }&amp;#125;-ref&quot;&amp;gt;&amp;#123;{ tag[0] }&amp;#125; &amp;lt;span&amp;gt;&amp;#123;{ tag[1].size }&amp;#125;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;#123;% endfor %&amp;#125;
  &amp;#123;% endif %&amp;#125;
&amp;#123;% endif %&amp;#125;
&amp;#123;% assign tags_list = null %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above is &lt;code&gt;JB/tags_list&lt;/code&gt; which is a helper to list tags and their total counts.&lt;/p&gt;

&lt;p&gt;In order to emulate passing arguments to the method, your include should reference localized variables whenever possible. Now we can pass in arguments by defining the local variables immediately before calling the include file:&lt;/p&gt;

&lt;h3 id='invoking_the_method'&gt;Invoking the Method.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign tags_list = site.tags %&amp;#125;
  &amp;#123;% include JB/tags_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can define as many &amp;#8220;arguments&amp;#8221; as you want, just remember to nullify them all at the end of your include to preserve modularity.&lt;/p&gt;

&lt;h3 id='gotchas'&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;In Liquid, it is impossible to inline assign a variable to anything other than a string. This means you can&amp;#8217;t pass in arrays, hashes, etc. However, as shown above, you can pass-by-reference, and assign local variables to variables that already exist.&lt;/p&gt;

&lt;p&gt;So to pass in data-structures, you need to define them in your YAML Front Matter, or &lt;code&gt;_config.yml&lt;/code&gt; file first, then pass them in by reference.&lt;/p&gt;

&lt;h2 id='contibuting'&gt;Contibuting&lt;/h2&gt;

&lt;p&gt;If you have a good idea for another helper, please follow the outlines above, then submit a pull request to &lt;a href='http://github.com/plusjade/jekyll-bootstrap'&gt;Jekyll-Bootstrap&lt;/a&gt; and I&amp;#8217;ll include it.&lt;/p&gt;

&lt;h1 id='methods'&gt;Methods&lt;/h1&gt;

&lt;h2 id='jbanalytics'&gt;JB/analytics&lt;/h2&gt;

&lt;p&gt;Includes analytics tracking code into your website.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% include JB/analytics %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, analytics &lt;strong&gt;are not loaded&lt;/strong&gt; when in localhost (development). Analytics are loaded when &lt;code&gt;site.safe&lt;/code&gt; is set to true. GitHub sets this flag so we treat a true setting as &amp;#8220;production&amp;#8221; mode.&lt;/p&gt;

&lt;p&gt;This method should be used within a theme&amp;#8217;s default.html layout file. Configuration for this method is outlined at: &lt;a href='/usage/blog-configuration.html'&gt;Jekyll Configuration System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='jbcategories_list'&gt;JB/categories_list&lt;/h2&gt;

&lt;p&gt;Provides a convenient way to list categories.&lt;/p&gt;

&lt;h3 id='list_sitewide_categories'&gt;List Sitewide Categories&lt;/h3&gt;

&lt;p&gt;List site-wide categories by passing in the &lt;code&gt;site.categories&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign categories_list = site.categories %&amp;#125;
  &amp;#123;% include JB/categories_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='list_categories_for_a_specific_post'&gt;List Categories for a Specific Post&lt;/h3&gt;

&lt;p&gt;You can also list categories specific to a post:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign categories_list = page.categories %&amp;#125;
  &amp;#123;% include JB/categories_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='list_categories_per_post_iteratively'&gt;List Categories Per Post Iteratively&lt;/h3&gt;

&lt;p&gt;Finally let&amp;#8217;s iterate through all posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% for post in site.posts %&amp;#125;
  &amp;lt;h3&amp;gt;Categories for: &amp;#123;{post.title}&amp;#125;&amp;lt;/h3&amp;gt;  
  &amp;lt;ul&amp;gt;
    &amp;#123;% assign categories_list = post.categories %&amp;#125;  
    &amp;#123;% include JB/categories_list %&amp;#125;
  &amp;lt;/ul&amp;gt;
&amp;#123;% endfor %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='source'&gt;Source&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./_includes/JB/categories_list&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='jbcomments'&gt;JB/comments&lt;/h2&gt;

&lt;p&gt;Includes a commenting system on blog post pages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% include JB/comments %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on your provider, comments may not always work when on localhost (development).&lt;/p&gt;

&lt;p&gt;This method should be used within a theme&amp;#8217;s post.html layout file. Configuration for this method is outlined at: &lt;a href='/usage/blog-configuration.html'&gt;Jekyll Configuration System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='jbpages_list'&gt;JB/pages_list&lt;/h2&gt;

&lt;p&gt;Provides a convenient way to list pages.&lt;/p&gt;

&lt;h3 id='list_all_pages'&gt;List All Pages&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign pages_list = site.pages %&amp;#125;
  &amp;#123;% include JB/pages_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='list_pages_from_a_subgroup'&gt;List Pages From a Sub-Group&lt;/h3&gt;

&lt;p&gt;Pages cannot have categories. However we can setup a similar functionality by manually associating a page to a &amp;#8220;group&amp;#8221;. Do this in the page&amp;#8217;s yaml front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: default
title: A Nice Title
group: project
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You then pass the group name to the pages_list helper:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign pages_list = site.pages %&amp;#125;
  &amp;#123;% assign group = 'project' %&amp;#125;
  &amp;#123;% include JB/pages_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='source'&gt;Source&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./_includes/JB/pages_list&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='jbposts_collate'&gt;JB/posts_collate&lt;/h2&gt;

&lt;p&gt;Organize and list posts in month/year clusters.&lt;/p&gt;

&lt;h3 id='collate_all_posts_in_reverse_chronological_order'&gt;Collate All Posts in Reverse Chronological Order&lt;/h3&gt;

&lt;p&gt;By default all posts are organized in reverse-chronological order - newest to oldest.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% assign posts_collate = site.posts %&amp;#125;
&amp;#123;% include JB/posts_collate %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='collate_a_subset_of_posts'&gt;Collate a Sub-Set of Posts&lt;/h3&gt;

&lt;p&gt;To collate a sub-set of posts, just pass in the sub-set. Bellow, only posts tagged &amp;#8220;jekyll&amp;#8221; will be collated:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% assign posts_collate = site.tags.jekyll %&amp;#125;
&amp;#123;% include JB/posts_collate %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='source'&gt;Source&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./_includes/JB/posts_collate&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='jbsetup'&gt;JB/setup&lt;/h2&gt;

&lt;p&gt;Provides global Liquid variables to all layouts, posts, and pages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% include JB/setup %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is automatically included for you when you use &lt;code&gt;rake post&lt;/code&gt; and &lt;code&gt;rake page&lt;/code&gt; to create posts and pages.&lt;/p&gt;

&lt;p&gt;The most relevant variables this sets is &lt;code&gt;BASE_PATH&lt;/code&gt; which should be prepended to all post and page links, and &lt;code&gt;ASSET_PATH&lt;/code&gt; which should be prepended to all theme-specific assets.&lt;/p&gt;

&lt;p&gt;These paths dynamically change based on localhost vs production mode as a convenience to you.&lt;/p&gt;

&lt;h2 id='jbsharing'&gt;JB/sharing&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not finished yet =(&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Includes sharing widgets on your blog post pages.&lt;/p&gt;

&lt;p&gt;Examples include tweet, plusone, like, reddit, etc.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% include JB/sharing %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should be specified within a theme&amp;#8217;s post.html layout file. Configuration for this method is outlined at: &lt;a href='/usage/blog-configuration.html'&gt;Jekyll Configuration System&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='jbtags_list'&gt;JB/tags_list&lt;/h2&gt;

&lt;p&gt;Provides a list of tags and their total counts.&lt;/p&gt;

&lt;h3 id='list_sitewide_tags'&gt;List Sitewide Tags&lt;/h3&gt;

&lt;p&gt;You can list sitewide tags by passing in the &lt;code&gt;site.tags&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign tags_list = site.tags %&amp;#125;
  &amp;#123;% include JB/tags_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='list_tags_for_a_specific_post'&gt;List Tags for a Specific Post&lt;/h3&gt;

&lt;p&gt;You can also list tags specific to a post:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;#123;% assign tags_list = page.tags %&amp;#125;
  &amp;#123;% include JB/tags_list %&amp;#125;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='list_tags_per_post_iteratively'&gt;List Tags Per Post Iteratively&lt;/h3&gt;

&lt;p&gt;Finally let&amp;#8217;s iterate through all posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;% for post in site.posts %&amp;#125;
  &amp;lt;h3&amp;gt;Tags for: &amp;#123;{post.title}&amp;#125;&amp;lt;/h3&amp;gt;  
  &amp;lt;ul&amp;gt;
    &amp;#123;% assign tags_list = post.tags %&amp;#125;  
    &amp;#123;% include JB/tags_list %&amp;#125;
  &amp;lt;/ul&amp;gt;
&amp;#123;% endfor %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='source'&gt;Source&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./_includes/JB/tags_list&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id='method_overrides'&gt;Method Overrides&lt;/h1&gt;

&lt;p&gt;All Jekyll-Bootstrap methods documented above can be overridden with a custom implementation. &lt;strong&gt;Editing Jekyll-Bootstrap files directly is not encouraged&lt;/strong&gt; because it will make upgrading to the latest release more problematic.&lt;/p&gt;

&lt;p&gt;Instead you can define another file with your own customizations. This is useful if you want to define an alternative HTML output syntax for things like tag and page lists. You also might want to override a comment provider with your own custom comment provider.&lt;/p&gt;

&lt;h2 id='usage'&gt;Usage&lt;/h2&gt;

&lt;h3 id='1_set_configuration'&gt;1. Set Configuration&lt;/h3&gt;

&lt;p&gt;Let Jekyll-Bootstrap know you want to override a method by updating your &lt;code&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;JB&lt;/code&gt; hash you must define (if not already defined) a hash with the key as the name of the method you intend to override:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JB :
  tags_list :
    provider : &amp;quot;custom&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code tells Jekyll-Bootstrap that you want the &lt;code&gt;tags_list&lt;/code&gt; provider to be &lt;code&gt;custom&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id='2_add_custom_file'&gt;2. Add custom file&lt;/h3&gt;

&lt;p&gt;Next you&amp;#8217;ll need to define a file at the path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./_includes/custom/tags_list&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file, exactly as named, will be used in place of the source Jekyll-Bootstrap file. You&amp;#8217;ll probably want to copy the &amp;#8220;meat&amp;#8221; of the code logic from the original source file into your custom file and then edit it as needed.&lt;/p&gt;

&lt;p&gt;You can follow this procedure for as many methods as you wish.&lt;/p&gt;</description>
                <link>or-urisa-yps/api/2011/11/28/bootstrap-api</link>
                <guid>or-urisa-yps/api/2011/11/28/bootstrap-api</guid>
                <pubDate>2011-11-28T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Theme API</title>
                <description>&lt;p&gt;Because we depend on Jekyll and Liquid, supporting modular theming requires some special considerations that are not always the most elegant solution. I expect the process to evolve over time so thanks for your feedback, patience, and support!&lt;/p&gt;
&lt;span class='label notice'&gt;Recommended&lt;/span&gt;
&lt;p&gt;View and study the repos for current published themes. &lt;a href='http://github.com/jekyllbootstrap/'&gt;http://github.com/jekyllbootstrap/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='theme_structure'&gt;Theme Structure&lt;/h2&gt;

&lt;p&gt;Version 0.1.0 of the Theme API is intentionally super-simple. &lt;br /&gt;Below is the structure of a theme as it exists in an &amp;#8220;installed&amp;#8221; state within Jekyll Bootstrap.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;.
|-- _includes
    |-- themes
        |-- THEME-NAME
            |-- default.html
            |-- post.html
            |-- page.html
            |-- settings.yml
|-- assets
    |-- themes
        |-- THEME-NAME
            |-- css
                |-- style.css
            |-- images
                |-- smileyface.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All themes are name-spaced to avoid conflicting with other theme files. As shown, a theme needs two main but separate directory components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;./_includes/themes/THEME-NAME&lt;/strong&gt;&lt;br /&gt;Any template defined in this folder will be usable as a normal layout once you run &lt;br /&gt;&lt;code&gt;$ rake theme:switch name=&amp;quot;THEME-NAME&amp;quot;&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;./assets/themes/THEME-NAME&lt;/strong&gt;&lt;br /&gt;Static assets for your theme should be namespaced via this folder. Your templates should use the liquid variable : &lt;code&gt;ASSET_PATH&lt;/code&gt; to call these assets.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='layouts'&gt;Layouts&lt;/h2&gt;

&lt;p&gt;Themes should come with three layouts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default.html&lt;/li&gt;

&lt;li&gt;post.html&lt;/li&gt;

&lt;li&gt;page.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default layout is the main template layout. The post and page define sub-layouts for their respective content types and get loaded into the default template.&lt;/p&gt;

&lt;h3 id='yaml_front_matter_and_settingsyml'&gt;YAML Front Matter and settings.yml&lt;/h3&gt;

&lt;p&gt;Layouts should not and cannot contain YAML Front Matter because they need to be loaded as include files.&lt;/p&gt;

&lt;p&gt;To include YAML FRONT Matter, use the settings.yml file. Simply define valid YAML in the settings.yml file and it will automatically get loaded into the default.html YAML Front Matter.&lt;/p&gt;

&lt;h2 id='assets'&gt;Assets&lt;/h2&gt;

&lt;p&gt;All assets used in your layout files should be organized neatly into your theme&amp;#8217;s namespaced asset folder.&lt;/p&gt;

&lt;p&gt;Make sure you load your assets using the following URL format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;&amp;#123;{ASSET_PATH}&amp;#125;/css/style.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; charset=&quot;utf-8&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how &lt;code&gt;ASSET_PATH&lt;/code&gt; is prepended to url for the asset.&lt;/p&gt;

&lt;h2 id='jekyll_bootstrap_helpers'&gt;Jekyll Bootstrap Helpers&lt;/h2&gt;

&lt;p&gt;Your theme should use JB helpers wherever possible.&lt;/p&gt;

&lt;h3 id='jbanalytics'&gt;JB/analytics&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;
  &amp;#123;% include JB/analytics %&amp;#125;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JB/analytics should always be included in the default.html just before the closing body tag.&lt;/p&gt;

&lt;h3 id='jbcomments'&gt;JB/comments&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;...
  &amp;lt;div id=&quot;post&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;comments&quot;&amp;gt;
    &amp;#123; include JB/comments &amp;#125;
  &amp;lt;/div&amp;gt;  
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JB/comments should always be included in the post.html file. Even if you don&amp;#8217;t support commenting, it should be up to the user to disable comments via the configuration settings.&lt;/p&gt;

&lt;h3 id='more_helpers'&gt;More Helpers&lt;/h3&gt;

&lt;p&gt;Please consult &lt;a href='/api/bootstrap-api.html'&gt;Jekyll Bootstrap API Documentation&lt;/a&gt; for all available methods to use in your theme.&lt;/p&gt;

&lt;h2 id='fine_grained_customization'&gt;Fine Grained Customization&lt;/h2&gt;

&lt;p&gt;As stated the first public release of the theme API is intentionally super-simple.&lt;/p&gt;

&lt;p&gt;Most designers need more control of the framework. I fully agree! Here are the things most requested.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fine grained per page customization.&lt;/li&gt;

&lt;li&gt;Arbitrary template/sub-template creation and nesting.&lt;/li&gt;

&lt;li&gt;Customization of all HTML output by JB methods.&lt;/li&gt;

&lt;li&gt;Custom syntax highlighting schemes.&lt;/li&gt;

&lt;li&gt;Standardized Javascript API.&lt;/li&gt;

&lt;li&gt;Proper page/post list ordering.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I expect to address every one of these issues but the initial release must be stable and &lt;em&gt;easy&lt;/em&gt;. I am not a designer so rather than over-engineer, I leave it to the community to help me evolve the theming system.&lt;/p&gt;

&lt;p&gt;Please &lt;a href='mailto:plusjade@gmail.com'&gt;email me&lt;/a&gt; or open a &lt;a href='http://github.com/plusjade/jekyll-bootstrap/issues'&gt;GitHub Issue&lt;/a&gt; with feedback!&lt;/p&gt;

&lt;h2 id='publishing_your_theme'&gt;Publishing Your Theme&lt;/h2&gt;

&lt;p&gt;Once your theme is looking good, you&amp;#8217;ll need to package it as a &lt;strong&gt;Theme Package&lt;/strong&gt;. Assuming you followed all the directions and have a valid directory structure:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:package &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;THEME-NAME&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a folder at:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;./_theme_packages/THEME-NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The contents of this folder is 1:1 file matching plus a &lt;code&gt;packager.yml&lt;/code&gt; detailing information about the packaging method.&lt;/p&gt;

&lt;h3 id='manifestyml'&gt;manifest.yml&lt;/h3&gt;

&lt;p&gt;The manifest.yml file is required. It must contain a key-value for the name of your theme. Beyond that you can include description and authorship data.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;name&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;the-program&amp;quot;&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;website&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;http://layouts-the.me.s3-website-us-east-1.amazonaws.com/themes/the-program/&amp;quot;&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;description&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;A&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;minimumlist&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;theme&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;for&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;Jekyll&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;+&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;Jekyll-Bootstrap.&amp;quot;&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;author&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;name&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Yuya&lt;/span&gt;&lt;span class='nv'&gt; &lt;/span&gt;&lt;span class='s'&gt;Saito&amp;quot;&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;email&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;cssradar@gmail.com&amp;quot;&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;website&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://css.studiomohawk.com/&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='readmemd'&gt;README.md&lt;/h3&gt;

&lt;p&gt;Additionally you may include a readme file with instructions specific to your theme as well as any credits or information you want to pass along.&lt;/p&gt;

&lt;h3 id='profit'&gt;Profit!&lt;/h3&gt;

&lt;p&gt;Well maybe in the future, but right now if you&amp;#8217;d like to have your theme officially included in the theme explorer, please put your packaged theme on GitHub and notify me. I&amp;#8217;ll work out a better system shortly. &lt;strong&gt;Thanks!&lt;/strong&gt;&lt;/p&gt;</description>
                <link>or-urisa-yps/api/2011/11/27/theme-api</link>
                <guid>or-urisa-yps/api/2011/11/27/theme-api</guid>
                <pubDate>2011-11-27T00:00:00-08:00</pubDate>
        </item>

        <item>
                <title>Jekyll Quick Start</title>
                <description>&lt;h2 id='1_install_jekyllbootstrap'&gt;1. Install Jekyll-Bootstrap&lt;/h2&gt;

&lt;p&gt;&lt;a href='/index.html#start-now'&gt;Install Jekyll-Bootsrap&lt;/a&gt; if you haven&amp;#8217;t already. Jekyll-bootstrap is a blogging framework with built-in support for theming, analytics, comments, and post/page creation.&lt;/p&gt;

&lt;h2 id='2_run_jekyll_locally'&gt;2. Run Jekyll Locally&lt;/h2&gt;

&lt;p&gt;In order to preview your blog locally you&amp;#8217;ll need to install the Jekyll ruby gem. Note gem dependencies will also be installed. You don&amp;#8217;t have to run a local version but it helps if you want to preview your content before publishing.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you run into a problem please consult the original &lt;a href='https://github.com/mojombo/jekyll/wiki/Install'&gt;Jekyll installation documentation&lt;/a&gt;. You can also &lt;a href='https://github.com/plusjade/jekyll-bootstrap/issues'&gt;create a support issue&lt;/a&gt; using GitHub Issues.&lt;/p&gt;

&lt;p&gt;Once the gem is installed you can navigate to your Jekyll-Bootstrap directory. If you&amp;#8217;ve followed the homepage instructions this will be: USERNAME.github.com. Once in the directory you&amp;#8217;ll run jekyll with server support:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd &lt;/span&gt;USERNAME.github.com 
&lt;span class='nv'&gt;$ &lt;/span&gt;jekyll --server
&lt;span class='c'&gt;# remember to change USERNAME to your GitHub username.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your blog is now available at: &lt;a href='http://localhost:4000/'&gt;http://localhost:4000/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='2_create_a_post'&gt;2. Create a Post&lt;/h2&gt;

&lt;p&gt;Create posts easily via rake task:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake post &lt;span class='nv'&gt;title&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rake task automatically creates a file with properly formatted filename and YAML Front Matter. Make sure to specify your own title. By default, the date is the current date.&lt;/p&gt;

&lt;p&gt;The rake task will never overwrite existing posts unless you tell it to.&lt;/p&gt;

&lt;h2 id='3_create_a_page'&gt;3. Create a Page&lt;/h2&gt;

&lt;p&gt;Create pages easily via rake task:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake page &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;about.md&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a nested page:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake page &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;pages/about.md&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a page with a &amp;#8220;pretty&amp;#8221; path:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake page &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;pages/about&amp;quot;&lt;/span&gt;
&lt;span class='c'&gt;# this will create the file: ./pages/about/index.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The rake task automatically creates a page file with properly formatted filename and YAML Front Matter as well as includes the Jekyll Bootstrap &amp;#8220;setup&amp;#8221; file.&lt;/p&gt;

&lt;h3 id='jekyllbootstrap_example_pages'&gt;Jekyll-Bootstrap Example Pages&lt;/h3&gt;

&lt;p&gt;Jekyll-bootstrap also provides many preconfigured page examples for reference. You can study the source and customize it for your own needs.&lt;/p&gt;
&lt;ul&gt;





  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  
    
      
    
  



&lt;/ul&gt;
&lt;h2 id='4_publish'&gt;4. Publish&lt;/h2&gt;

&lt;p&gt;After you&amp;#8217;ve added posts or made changes to your theme or other files, simply commit them to your git repo and push the commits up to GitHub.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git add .
&lt;span class='nv'&gt;$ &lt;/span&gt;git commit -m &lt;span class='s2'&gt;&amp;quot;Add new content&amp;quot;&lt;/span&gt;
&lt;span class='nv'&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A GitHub post-commit hook will automatically deploy your changes to your hosted blog. You will receive a success or failure notice for every commit you make to your blog.&lt;/p&gt;

&lt;h2 id='5_customize'&gt;5. Customize&lt;/h2&gt;

&lt;p&gt;Jekyll-Bootstrap can be used as-is as a basic blogging platform. However there are plenty of ways to dig into deeper customization. The following outlines deeper Jekyll-Bootstrap customization techniques:&lt;/p&gt;

&lt;h3 id='themes'&gt;Themes&lt;/h3&gt;

&lt;p&gt;Jekyll-Bootstrap supports modular theming. Themes can co-exist and be enabled/disabled on demand. Editing, configuring, and creating themes is docummented in the &lt;a href='/usage/jekyll-theming.html'&gt;Theming&lt;/a&gt; section.&lt;/p&gt;

&lt;h3 id='blog_configuration'&gt;Blog Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll and Jekyll-Bootstrap has a simple but powerful &lt;a href='/usage/blog-configuration.html'&gt;Jekyll Configuration System&lt;/a&gt;. You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify a custom permalink format for blog posts.&lt;/li&gt;

&lt;li&gt;Specify a commenting engine like disqus, intensedebate, livefyre, or custom.&lt;/li&gt;

&lt;li&gt;Specify an analytics engine like google, getclicky, or custom.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='programming_interface'&gt;Programming Interface&lt;/h3&gt;

&lt;p&gt;The API pages document main data-structures and code available for use in Jekyll and Jekyll-Bootstrap. Consult these pages for how and where to use the data and code provided.&lt;/p&gt;

&lt;h3 id='jekyll_introduction'&gt;Jekyll Introduction&lt;/h3&gt;
&lt;span class='label notice'&gt;highly recommend&lt;/span&gt;
&lt;p&gt;I highly recommend reading the &lt;a href='/lessons/2011/12/29/jekyll-introduction'&gt;Jekyll Introduction&lt;/a&gt; if you plan to customize your blog. The introduction is meant for core understanding of how and why Jekyll works the way it does. This will provide you with the proper context, knowledge-base, and fundamentals necessary to understand and be efficient in working with Jekyll and Jekyll-Bootstrap.&lt;/p&gt;</description>
                <link>or-urisa-yps/usage/2011/10/31/jekyll-quick-start</link>
                <guid>or-urisa-yps/usage/2011/10/31/jekyll-quick-start</guid>
                <pubDate>2011-10-31T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Using Themes</title>
                <description>&lt;h2 id='introduction'&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As of JB version 0.2.x themes are now entirely modular. They are tracked and versioned individually as &lt;strong&gt;Theme Packages&lt;/strong&gt;. This allows everyone to publish and share themes freely.&lt;/p&gt;

&lt;p&gt;Jekyll-Bootstrap v 0.2.x ships with only the stock &amp;#8220;twitter&amp;#8221; theme. Additional themes need to be &amp;#8220;installed&amp;#8221; as outlined below.&lt;/p&gt;
&lt;span class='label warning'&gt;NOTE&lt;/span&gt;
&lt;p&gt;Jekyll-Bootstrap uses &lt;code&gt;rake tasks&lt;/code&gt; to implement much of its functionality. If you are new to &lt;code&gt;rake&lt;/code&gt; a rake task is just a ruby method that can be run in the base-directory of Jekyll-Bootstrap. You should never run arbitrary server side code on your system without first reviewing the source! View the &lt;a href='https://github.com/plusjade/jekyll-bootstrap/blob/master/Rakefile'&gt;Rakefile&lt;/a&gt; source.&lt;/p&gt;

&lt;h2 id='find_themes'&gt;Find Themes&lt;/h2&gt;

&lt;p&gt;You can find and browse the latest official themes in the &lt;a href='http://themes.jekyllbootstrap.com'&gt;Theme Explorer&lt;/a&gt;. The theme explorer is still a work in progress; it shows full-website previews of all available themes.&lt;/p&gt;
&lt;div style='ext-align:right; margin-bottom:10px'&gt;
  &lt;a href='http://themes.jekyllbootstrap.com' style='' class='btn primary'&gt;Launch Theme Explorer&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, designers are free to publish their own themes as long as they are packaged appropriately. You can then use the same installation method outlined below to install the theme.&lt;/p&gt;

&lt;p&gt;Directly browse current Theme Packages on GitHub: &lt;a href='https://github.com/jekyllbootstrap'&gt;https://github.com/jekyllbootstrap&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='install_themes'&gt;Install Themes&lt;/h2&gt;

&lt;p&gt;Install a theme by using the rake task and passing in the theme&amp;#8217;s git url.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:install &lt;span class='nv'&gt;git&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;https://github.com/jekyllbootstrap/theme-the-program.git&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The installer uses git to download the Theme Package and then installs it. If you have obtained a Theme Package in another way, such as zip download, you can manually place it into your &lt;code&gt;./_theme_packages&lt;/code&gt; folder and then run the installer with the name of the theme.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:install &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;THEME-NAME&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a convenience, after the install is successful, the task will ask you if you&amp;#8217;d like to switch to the newly installed theme. Type &amp;#8216;y&amp;#8217; and enter to switch!&lt;/p&gt;

&lt;h2 id='switch_themes'&gt;Switch Themes&lt;/h2&gt;

&lt;p&gt;Once your themes are installed you can switch between them via rake task:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:switch &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;the-program&amp;quot;&lt;/span&gt;
&lt;span class='c'&gt;# for 0.1.0 users `rake switch_theme` still works.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='customize_themes'&gt;Customize Themes&lt;/h2&gt;

&lt;p&gt;Theme layouts are contained in &lt;code&gt;./_includes/themes/THEME-NAME&lt;/code&gt;. It is important that you edit files in the theme directory rather than &lt;code&gt;_layouts&lt;/code&gt; because switching themes will overwrite files in the &lt;code&gt;_layout&lt;/code&gt; directory and you will lose your changes. The main point here is keeping themes modular; this way editing one does not affect the other.&lt;/p&gt;

&lt;h3 id='adding_templates'&gt;Adding Templates&lt;/h3&gt;

&lt;p&gt;You are free add extra template files to &lt;code&gt;_layouts&lt;/code&gt; in order to customize your blog.&lt;/p&gt;

&lt;p&gt;However if you want to add theme-specific layouts you should add them to the theme&amp;#8217;s directory in &lt;code&gt;_includes&lt;/code&gt;. After your files are added make sure to run the switcher again:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:switch &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;the-minimum&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='static_assets'&gt;Static Assets&lt;/h3&gt;

&lt;p&gt;Static assets are name-spaced for each theme. They are available at &lt;code&gt;./assets/themes/THEME-NAME&lt;/code&gt;. Make sure you edit and add assets in this directory. All themes are provided with the liquid variable: &lt;code&gt;ASSET_PATH&lt;/code&gt; which trace back to the aforementioned directory.&lt;/p&gt;

&lt;h2 id='add_your_own_theme'&gt;Add Your Own Theme&lt;/h2&gt;

&lt;p&gt;Read the &lt;a href='/api/theme-api.html'&gt;Theme API Documentation&lt;/a&gt; for instructions on how to build and publish custom themes for Jekyll Bootstrap.&lt;/p&gt;</description>
                <link>or-urisa-yps/usage/2011/10/30/jekyll-theming</link>
                <guid>or-urisa-yps/usage/2011/10/30/jekyll-theming</guid>
                <pubDate>2011-10-30T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Blog Configuration</title>
                <description>&lt;p&gt;Your Jekyll-Bootstrap blog can be configured by setting options within the &lt;code&gt;./_config.yml&lt;/code&gt; file. You&amp;#8217;ll note the extensive documentation provided within the file itself. Let&amp;#8217;s go over some of these in detail:&lt;/p&gt;

&lt;h2 id='blog_post_permalink_format'&gt;Blog Post Permalink Format&lt;/h2&gt;

&lt;p&gt;Jekyll provides extensive customization options as to how your blog post permalinks will be generated. You can consult the format table here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Permalinks'&gt;Jekyll Permalinks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jekyll-Bootstrap ships with the traditional default format for blogs:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='l-Scalar-Plain'&gt;permalink&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;/:categories/:year/:month/:day/:title/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any category structure specified on a post will be included within the url, then the date, and finally the post title.&lt;/p&gt;

&lt;p&gt;Play around with what url configuration works best for you.&lt;/p&gt;

&lt;h2 id='set_base_path'&gt;Set BASE_PATH&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;All post and page urls in Jekyll-Bootstrap expect to be prepended with &lt;code&gt;BASE_PATH&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;BASE_PATH&lt;/code&gt; configuration is for special scenarios in which your blog must run from a sub-directory. The main scenario being if your blog will be hosted on a GitHub &lt;strong&gt;Project&lt;/strong&gt; Page. If you are deploying this website for one of your GitHub projects you must set &lt;code&gt;BASE_PATH&lt;/code&gt; to the name of your GitHub project.&lt;/p&gt;

&lt;p&gt;In any case, you can leave this blank if you have defined a &lt;code&gt;CNAME&lt;/code&gt; for your site. More info is available at: &lt;a href='http://pages.github.com'&gt;http://pages.github.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;br /&gt;When in localhost, your site will run from root &amp;#8221;/&amp;#8221; regardless of &lt;code&gt;BASE_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='enabling_comments'&gt;Enabling Comments&lt;/h2&gt;

&lt;p&gt;Jekyll-Bootstrap ships with widget codes that enable commenting for &lt;a href='http://disqus.com'&gt;Disqus&lt;/a&gt;, &lt;a href='http://intensedebate.com'&gt;Intense Debate&lt;/a&gt;, &lt;a href='http://www.livefyre.com/'&gt;livefyre&lt;/a&gt;, and &lt;a href='https://developers.facebook.com/docs/reference/plugins/comments/'&gt;Facebook Comments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enable commenting for your blog you will need to have setup an account with one of these providers. In the &lt;code&gt;_config.yml&lt;/code&gt; you should see a hash named &lt;code&gt;comments&lt;/code&gt; as shown below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='c1'&gt;# Settings for comments helper&lt;/span&gt;
&lt;span class='c1'&gt;# Set &amp;#39;provider&amp;#39; to the comment provider you want to use.&lt;/span&gt;
&lt;span class='c1'&gt;# Set &amp;#39;provider&amp;#39; to false to turn commenting off globally.&lt;/span&gt;
&lt;span class='c1'&gt;#&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;comments&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;provider&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;disqus&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;disqus&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;short_name&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;jekyllbootstrap&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;livefyre&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;site_id&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;123&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;intensedebate&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;account&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;123abc&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;facebook&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;appid&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;123&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;num_posts&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;5&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;width&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;580&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;colorscheme&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;light&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='choose_a_provider'&gt;Choose a Provider&lt;/h3&gt;

&lt;p&gt;Set &lt;code&gt;provider&lt;/code&gt; to the provider you intend to use. Make sure to specify your account credentials for the relevant provider within the hash named for &lt;em&gt;that&lt;/em&gt; provider.&lt;/p&gt;

&lt;p&gt;In the example above, the &lt;strong&gt;disqus&lt;/strong&gt; provider will be used and will be provided with &lt;strong&gt;jekyllbootstrap&lt;/strong&gt; as the account &lt;strong&gt;short_name&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id='use_a_custom_provider'&gt;Use a Custom Provider&lt;/h3&gt;

&lt;p&gt;To use a custom provider, set &lt;code&gt;provider: custom&lt;/code&gt;. Next create a file at this path:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;./_includes/custom/comments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file will load wherever the theme has included its comments so you can inject your own widget code via this file. If you have a provider I don&amp;#8217;t know about, consider opening a &lt;a href='http://github.com/plusjade/jekyll-bootstrap/issues'&gt;GitHub Issue&lt;/a&gt; so I can include it!&lt;/p&gt;

&lt;h3 id='disable_comments'&gt;Disable Comments&lt;/h3&gt;

&lt;p&gt;Set &lt;code&gt;provider: false&lt;/code&gt; to disable comments globally.&lt;/p&gt;

&lt;p&gt;Disable comments for individual pages/posts by specifying &lt;code&gt;comments: false&lt;/code&gt; in the page/post YAML Front Matter:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;layout&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;post&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;category&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;lessons&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;comments&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;false&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;tags&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='p-Indicator'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;yay&lt;/span&gt;&lt;span class='p-Indicator'&gt;]&lt;/span&gt;
&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='enabling_analytics'&gt;Enabling Analytics&lt;/h2&gt;

&lt;p&gt;Jekyll-Bootstrap ships with website analytics codes for &lt;a href='http://google.com/analytics'&gt;Google&lt;/a&gt;, and &lt;a href='http://getclicky.com'&gt;GetClicky&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To enable analytics for your blog you will need to have setup an account with one of these providers. In the &lt;code&gt;_config.yml&lt;/code&gt; you should see a hash named &lt;code&gt;analytics&lt;/code&gt; as shown below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='c1'&gt;# Settings for analytics helper&lt;/span&gt;
&lt;span class='c1'&gt;# Set &amp;#39;provider&amp;#39; to the analytics provider you want to use.&lt;/span&gt;
&lt;span class='c1'&gt;# Set &amp;#39;provider&amp;#39; to false to turn analytics off globally.&lt;/span&gt;
&lt;span class='c1'&gt;#        &lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;analytics&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;provider&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;google&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;google&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; 
      &lt;span class='l-Scalar-Plain'&gt;tracking_id&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;UA-123-12&amp;#39;&lt;/span&gt;
  &lt;span class='l-Scalar-Plain'&gt;getclicky&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
    &lt;span class='l-Scalar-Plain'&gt;site_id&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='choose_a_provider'&gt;Choose a Provider&lt;/h3&gt;

&lt;p&gt;Set &lt;code&gt;provider&lt;/code&gt; to the provider you intend to use. Make sure to specify your account credentials for the relevant provider within the hash named for &lt;em&gt;that&lt;/em&gt; provider.&lt;/p&gt;

&lt;p&gt;In the example above, the &lt;strong&gt;google&lt;/strong&gt; provider will be used and will be provided with &lt;strong&gt;UA-123-12&lt;/strong&gt; as the account &lt;strong&gt;tracking_id&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id='use_a_custom_provider'&gt;Use a Custom Provider&lt;/h3&gt;

&lt;p&gt;To use a custom provider, set &lt;code&gt;provider: custom&lt;/code&gt;. Next create a file at this path:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='text'&gt;./_includes/custom/analytics
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file will load wherever the theme has included its analytics so you can inject your own widget code via this file. If you have a provider I don&amp;#8217;t know about, consider opening a &lt;a href='http://github.com/plusjade/jekyll-bootstrap/issues'&gt;GitHub Issue&lt;/a&gt; so I can include it!&lt;/p&gt;

&lt;h3 id='disable_analytics'&gt;Disable Analytics&lt;/h3&gt;

&lt;p&gt;Set &lt;code&gt;provider: false&lt;/code&gt; to disable analytics globally.&lt;/p&gt;

&lt;p&gt;Disable analytics for individual pages/posts by specifying &lt;code&gt;analytics: false&lt;/code&gt; in the post/page YAML Front Matter:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='yaml'&gt;&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;layout&lt;/span&gt;&lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;post&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;category&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;lessons&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;analytics&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='l-Scalar-Plain'&gt;false&lt;/span&gt;
&lt;span class='l-Scalar-Plain'&gt;tags&lt;/span&gt; &lt;span class='p-Indicator'&gt;:&lt;/span&gt; &lt;span class='p-Indicator'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;yay&lt;/span&gt;&lt;span class='p-Indicator'&gt;]&lt;/span&gt;
&lt;span class='nn'&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>or-urisa-yps/usage/2011/10/29/blog-configuration</link>
                <guid>or-urisa-yps/usage/2011/10/29/blog-configuration</guid>
                <pubDate>2011-10-29T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Deployment &amp; Hosting</title>
                <description>&lt;h2 id='deploy_jekyll_to_github_pages'&gt;Deploy Jekyll to GitHub Pages&lt;/h2&gt;

&lt;p&gt;You can deploy Jekyll to your GitHub account and GitHub will parse your repo through Jekyll and host the result on username.github.com This is very nice of GitHub and the most convenient strategy. However you cannot extend jekyll via plugins with this version because GitHub will not run them for security reasons.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://pages.github.com'&gt;GitHub Pages&lt;/a&gt; provides a comprehension tutorial to deploying your Jekyll repository to GitHub Pages.&lt;/p&gt;

&lt;h3 id='jekyllbootstrap_is_built_to_run_on_github_pages'&gt;Jekyll-Bootstrap is Built to Run on GitHub Pages.&lt;/h3&gt;

&lt;p&gt;&lt;a href='http://jekyllbootstrap.com'&gt;http://jekyllbootstrap.com&lt;/a&gt; itself, is running via GitHub pages. You can see that this website is also available at: &lt;a href='http://plusjade.github.com/jekyll-bootstrap'&gt;http://plusjade.github.com/jekyll-bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you follow the development practices outlined in Jekyll-bootstrap all you have to do is clone the jekyll-bootstrap framework, clear out the posts and pages and add in your own content. Then push this to github as per the &lt;a href='http://pages.github.com'&gt;GitHub Pages&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;p&gt;Please &lt;a href='http://plusjade.com'&gt;contact me&lt;/a&gt; if you run into any trouble.&lt;/p&gt;

&lt;h2 id='deploy_jekyll_to_your_custom_server'&gt;Deploy Jekyll to Your Custom Server&lt;/h2&gt;

&lt;p&gt;The main reason you&amp;#8217;d want to host your website yourself is because you can then run custom plugins and customize Jekyll to your heart&amp;#8217;s content.&lt;/p&gt;

&lt;p&gt;Please see the original docs for &lt;a href='https://github.com/mojombo/jekyll/wiki/Deployment'&gt;custom Jekyll deployment strategies&lt;/a&gt;.&lt;/p&gt;</description>
                <link>or-urisa-yps/usage/2011/10/28/deployment-and-hosting</link>
                <guid>or-urisa-yps/usage/2011/10/28/deployment-and-hosting</guid>
                <pubDate>2011-10-28T00:00:00-07:00</pubDate>
        </item>


</channel>
</rss>
